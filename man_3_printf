.\" Manpage for _printf.
.TH _printf 3 "23 July 2023" "1.0" "Program Manual for _printf"
.SH NAME
 _printf - formatted output conversion and print data.
.SH SYNOPSIS
.nf
.BI printf (FORMAT, ARGUMENT)...
.PP
.BI "#include 'main.h'"
.BI "#include <stdarg.h>"
.BI "#include <unistd.h>"
.BI "#include <stdio.h>"
.BI "#include <stdlib.h>"
.PP
.BI #define BUFF_SIZE 1024
.PP
.BI "int _printf(const char *format, ...);"
.BI "int print_pctg(va_list __attribute__((unused)), char *, unsigned int);"
.BI "int print_char(va_list args, char *buf, unsigned int buf_i);"
.BI "int print_string(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_int(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_binary(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_unsigned_int(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_octal(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_lower_hex(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_upper_hex(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_S(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_address(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_reverse(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_rot13(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_plus_int(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_hash_oct(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_hash_hexL(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_upper_hex(va_list args, char *buffer, unsigned int buf_i);"
.BI "int print_space_int(va_list args, char *buffer, unsigned int buf_i);"
.PP
.BI "int (*spec_func(const char *str, int idx))(va_list, char *, unsigned int);"
.BI "int spec_func_count(const char *str, int idx);"
.PP
.BI "unsigned int hand_buff(char *buffer, char c, unsigned int buf_i);"
.BI "int display_buff(char *buffer, unsigned int bytes);"
.PP
.BI "char *init_bin(char *bin, long int arg, int is_neg, int size);"
.BI "char *init_oct(char *octal, char *binary);"
.PP
.SH DESCRIPTION
The output function _printf() produce output according to a format. the function _printf converts the character strings that receives as argument and prints it on the standard output.
.SH RETURN VALUE
Returns the number of all the characters printed, excluding the NULL byte used to end output to strings.
.SH Format String Format
The format string is a character string, which contains two types of directives: ordinary characters which are coppied to the output stream; and conversion specifiers. Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.SH Conversion Specifiers
This are the characters that specifies the type of conversion to be applied. The conversion specifiers and their meanings are: 
.TP
.B c
.R The \fIint\fR argument is converted to an \fIunsigned char\fR, and the resulting character is written.
.TP
.B s
.R The \fIconst char *\fR argument is a pointer to an array of characters, that converts the corresponding argument to a character string.
.TP
.B d, i
.R The \fIint\fR argument is converted to signed decimal notation.
.TP
.B o, u, x, X
.R The \fIunsigned int\fR argument is converted to unsigned octal \fIo\fR (base 8 number), unsigned decimal \fIu\fR (base 10 number), unsigned hexadecimal \fIx\fR (base 16 number with lowercase letters) and unsigned hexadecimal \fIX\fR (base 16 number with uppercase letters).
.TP
.B %, %%
.R If only the \fI%\fR character is written no argument is converted. The complete conversion specification is \fI%%\fR, that returns the actual sign if there in front.
.TP
.B S
.R The \fIconst char\fR argument is a pointer to an array of characters, that converts the corresponding argument to a character st\
ring, with non-printable characters (0 < ASCII value < 32 or >= 127).
.TP
.B p
.R The \fIvoid * pointer\fR argument is printed in hexadecimal.
.TP
.B S
.R The \fIconst char\fR argument is a pointer to an array
.SH The flag characters
The character \fI%\fR is followed by zero the following flags:
.TP
.B +
.R A sign \fI+\fR or \fI-\fR will be placed before a number followed by a signed conversion.
.TP
.B #
.R Print number in hexadecimal, upeercase hexadecimal and octal where the first character of the output string is made zero.
.TP
.B ' '
.R A space in blank should be left before a positive number followed by a signed conversion.
.SH NOTES
.R The \fB_printf()\fR is a project collaboration between \fBGideon Ofori Addo\fR and \fBCrystal Opaye\fR, students of Software Engineering at \fBALX softwarw engineering program\fR.
.SH BUGS
.R In process
.SH EXAMPLE
.R To print the the string \fBHello ALX!\fR and its length in decimal.

#include ''main.h''

int main(void)

{

	int length;

	_printf(''%s'', ''Hello, ALX!'')

	_printf(''Hello ALX! contains %d characters'', length);

	length = _printf(''Hello ALX!'');

	return (0);

}
.SH SEE ALSO
.R printf(3)
.SH AUTHORS
Written by \fBGideon Ofori Addo\fR and \fBCrytal Opaye\fR.
